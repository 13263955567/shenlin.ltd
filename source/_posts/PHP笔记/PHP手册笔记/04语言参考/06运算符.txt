运算符
---------

运算符优先级

	尽管赋值运算符=比其他大多数的运算符的优先级低，PHP仍旧允许类似如下的表达式：

		if(!$a=foo())	

		此例中的foo()返回值赋给了$a

算术运算符

	-$a 		取反

	$a % $b		取模，即$a除以$b的余数
				在运算之前操作数都会转换成整数
				在$a为负值时，结果也是负值

	$a / $b		通常返回浮点数
				当两个操作数都是整数或字符串转换成的整数，并且可以整除，这时它返回的值为整数。

赋值运算符

	在PHP5中，对象总是通过引用赋值的。

	资源类型呢??

	其他类型的变量则默认都是传值赋值???

位运算符

	对整型数进行操作

	如果参数分别为整型和字符串型，则将字符串转为整型

	如果参数都是字符串，则对字符串的ASCII值进行操作

	$a & $b
	$a | $b
	$a ^ $b		按位异或
	~ $a		按位非
	$a << $b	将$a的位向左移动$b次，每一次移动表示乘以2
	$a >> $b	将$a的位向右移动$b次，每一次移动表示除以2

逻辑运算符

	&& 和 and	逻辑与，有两种运算符是因为它们的优先级不同，&&比and优先级高，后者优先级几乎是最低的

				$e = true && false;	//$e的值为false，&&的优先级比=高

				$f = true and true;	//$f的值为true，and的优先级比=低

	|| 和 or	逻辑或，有两种运算符是因为它们的优先级不同，||比or优先级高，后者优先级几乎是最低的

				$e = false || true;	//$e的值为true，||的优先级比=高

				$f = false or true;	//$f的值为false，or的优先级比=低

	!			逻辑非
	xor			逻辑异或

	注意逻辑运算符的短路求值，下列语句中的foo()都不会被执行：

		$a = (false && foo());
		$b = (true  || foo());
		$c = (false and foo());
		$d = (true  or  foo());

递增、递减运算符

	$a++; ++$a; $a--; --$a;

	递增、递减运算符不影响布尔值

	递减NULL没效果，递增NULL则为1

	字符变量的递增、递减：

		对字符变量递增沿袭了Perl的习惯：

				$i = 'W';
				for ($n=0; $n<6; $n++) {
					echo ++$i . "\n";
				}

				输出：

				X
				Y
				Z
				AA
				AB
				AC
				
		字符变量只能递增，不能递减

		只支持纯字母A-Za-z

数组运算符

	$a + $b	联合

		合并$a和$b的键值对到一个新数组，遇到相同的键则$a覆盖$b的值

	$a == $b
		$a 和 $b具有相同的键值对

	$a != $b 或者 $a <> $b

	$a === $b	全等

		$a和$b具有相同的键值对，并且顺序和类型相同

	$a !== $b	不全等

字符串运算符

	.和.=

类型运算符
	
	instanceof

	用于确定一个变量$var是否属于某一个类A的实例：$var instanceof MyClass

	若类A继承子类P，则此变量$var同样也是类P的一个实例

	若类A实现了接口I,则变量$var也是接口I的实例。

	也可用于对象和字符串变量：

		class MyClass
		{
		}

		$a = new MyClass;
		$b = new MyClass;
		$c = 'MyClass';
		$d = 'NotMyClass';

		var_dump($a instanceof $b);
		var_dump($a instanceof $c);
		var_dump($a instanceof $d);

		输出：

		boolean true
		boolean true
		boolean false
		
	可以和逻辑非运算符!搭配使用，以确认某个变量不是某个类的实例: if(!($var instanceof MyClass))

执行运算符

	反引号``

	将反引号中的内容作为外壳命令来执行，并将其输出信息返回。

		$output = `ls -al`;
		echo "<pre>$output</pre>";

	在激活了安全模式或者关闭了shell_exec()时是无效的。

	与函数shell_exec()相同 

		string shell_exec(string $cmd)

		参数cmd：要执行的外壳命令

		返回值：命令的输出

		$output = shell_exec('ls -al');

		此函数在激活了安全模式时也是无效的

	PHP.ini中的安全模式设定

		safe_mode boolean

			是否启用php的安全模式

错误控制运算符

	@

	将其放置在一个PHP表达式之前，则此表达式产生的任何错误信息都被忽略掉。

		$value = @$arr['NoExistsKey'];

	注意：@运算符使导致脚本终止运行的严重错误的错误报告也失效，这意味着脚本可能会没有任何迹象的死在那里 

	此变量在每次出错时都会被覆盖，所以如果想用它的话要尽早检查。

	如果激活了PHP.ini中的track_errors特性，表达式产生的任何错误信息都被存放在变量$php_errormsg中

		track_error boolean

			默认是关闭的

			如果开启，则最后的一个错误将永远存放在变量$php_errormsg中

		预定义变量$php_errormsg

			包含了PHP生成的最新错误信息

			这个变量只在错误发生的作用域内可用，并且要求track_errors是开启的

			用户定义了错误处理句柄set_error_handler()，并且返回false的时候，$php_errormsg就会被设置。

		mixed set_error_handler ( callback $error_handler [, int $error_types = E_ALL | E_STRICT ] )

			设置一个用户自定义的错误处理函数来处理脚本中的运行时错误。

比较运算符

	比较一个整数和字符串，则字符串会被转换为整数。

	比较两个数字字符串，则作为整数比较。

	布尔值false < true

	以上规则也适用于switch语句。

	三元运算符：(expr1) ? (expr2) : (expr3)

		注意三元运算符是个语句，因此其求值不是变量，而是语句的结果。

		return $var == 33 ? $a : $b; 将不起作用，以后的PHP版本会为此发出一条警告。

	int strcasecmp(string $str1,string $str2)

		二进制安全比较字符串，不区分大小写

		str1 < str2，则返回负数

		str1 = str2，则返回0

		str1 > str2，返回正数

	int strcmp(string  $str1,string $str2)

		同上函数相同，只是区分大小写
