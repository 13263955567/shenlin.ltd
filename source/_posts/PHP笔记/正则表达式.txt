正则表达式概述

	1、正则表达式是描述字符串排列模式的一种自定义语法规则
	2、可以使用字符串函数完成的任务则不要用正则表达式，一些儿复杂的操作则适合使用正则。
	3、正则表达式也称为模式表达式
	4、正则表达式是使用一些儿特殊字符，通过构建具有特定规则的模式，与输入字符串比较，再进行分割、匹配、查找、替换等工作。
	5、正则表达式和函数一起使用才起作用，否则就是个普通字符串
	6、PHP中提供了两套正则表达式函数库，一种是POSIX扩展正则表达式（以ereg_开头的函数），一种是与Perl兼容的正则表达式函数(以preg_开头的函数），推荐使用后一种
	7、正则两方面需要学习：1、正则表达式的模式如何编写  2、正则表达式的处理函数


正则表达式语法
	1、定界符号
		开始和结束符号 /
		除了字母、数字和反斜线\以外的任何字符都可以为定界符
		||
		//
		{}
		!!
		但无特殊需要，都使用正斜线//
	2、原子
		img \s
		原子是正则表达式的最基本组成单位，一个正则表达式中必须至少要包含一个原子
		正则表达式可以单独使用的字符就是原子

		1、包含所有打印和非打印字符
		2、有意义的字符如元字符，想作为原子使用，则可以用转义字符\
		3、经转义后，一些代表范围的原子：
			\d	任意一个十进制数字
			\D	任意一个非数字之外的字符
			\s	任意一个空白字符 \n\r\t\f
			\S	任意一个非空白字符
			\w	任意一个字a-zA-Z0-9_
			\W	任意一个非字
		4、使用[]自定义原子表，可以匹配[]中的任意一个原子
			[a-f4-9]
			[^a-f] ^表示取反，就是除了原子表中的原子，^必须是[]中的第一个字符
		5、.
			默认情况下，表示换行符外任意一个字符

	3、元字符
		是一种特殊字符，是用来修饰原子的，不可以单独出现
		?	前面的原子可以出现0次、1次
		+	前面的原子可以出现1次或多次
		*	前面的原子可以出现0次、1次或多次
		{}	自定义前面原子出现次数
			{m}	//m表示一个正数，表示前面原子出现m次
			{m,n}	//m小于n，表示前面原子最少出现m次，最多出现n次，包括m和n次
			{m,}	//表示前面的原子最少出现m次，最多无限
			{,n}	//表示前面的原子最多出现n次
		^	作为正则表达式的第一个字符出现，则表示必须以这个正则表达式开始	
		$	作为正则表达式的最后一个字符出现，则表示必须以这个正则表达式结尾
		|	表示 或 的关系，它的优先级是最低的，最后考虑它的功能
		\b	表示一个边界
		\B	表示一个非边界
		()	重点：
				1、作为大原子使用
					"/abc+/"
					"/(abc)+/"
				2、改变优先级，加括号可以提高优先级
					"/cat|dog/"
					"/ca(t|d)og/"
				3、作为子模式使用
					全部匹配作为一个大模式，放到数组的第一个元素中
					每个()是一个子模式，按顺序放到数组的其他元素中
				4、可以取消子模式，就将()作为大原子或改变优先级使用
					(?:)
				5、反向引用，可以在模式中直接将子模式取出，再作为正则表达式的一部分
					\n 取第n个子模式
					使用注意，正则被单引号和双引号括起来时还不相同
					双引号 "\\n"
					单引号 '\n'
					或使用下列方式
					${n}
		元字符的优先级顺序
			第一优先级：\
			第二优先级：() (?:) []
			第三优先级：* + ? {}
			第四优先级：^ $ \b
			第五优先级：|

	4、模式修正符号
		"\\模式修正符"
		只有模式修正符放定界符之外

		i	表示匹配时不区分大小写
		m	默认情况，无论字符串多少行都视为一行；加m后则每行的开头和结尾都分别匹配^和$
		s	默认情况，元字符中的"."不能表示换行符号，加s后将字符串视为单行，"."则可匹配换行符号
		x	表示模式中的空白忽略不计	
		e	正则表达式必须使用在preg_replace替换函数中时才可以使用
		U	默认为贪婪模式，加U则取消贪婪模式
			但有的语言不支持模式修正符号，另一种使用?完成 .*?  .+?
			但上述两种方式同时使用，则开启了贪婪模式

	/原子和元字符/模式修正符号 

		/为定界符，一些儿语言不需要定界符


正则表达式函数
	
	1、字符串匹配和查找

	preg_match();
		将正则表达式和字符串进行匹配，遇到第一个匹配则停止，并返回1，没有遇到匹配则返回0，发生错误返回false，一般用于验证email等
	
		参数1：正则表达式
		参数2：字符串
		参数3：匹配到的结果，为 一 维数组
		参数4：
		参数5：

		只是检测字符串中是否包含另一个字符串，可以使用下面的字符串函数：

		strstr()
			从搜到的字符串到结尾的剩余字符串
			参数1：源字符串
			参数2：要搜索字符串
		stristr()	//不区分大小写

		strpos()
			一个字符串在另一个字符串中最先出现的位置
		stripos()
			一个字符串在另一个字符串中的最后出现的位置

		substr()
			返回子字符串

			参数1：源字符串
			参数2：开始位置，大于0则从头部算起，字符串的位置从0开始
					 小于0则从尾部算起，字符串的位置从1开始
					 大于等于字符串长度，则返回false
			参数3：字符长度，不提供则取到字符串末尾
                                         为0、false或null则返回空字符串
					 小于0则表示末尾要保留几位字符串

	preg_match_all();
		将正则表达式和字符串进行匹配，会完整检测每一个匹配，并返回匹配次数，没有匹配到则返回0，发生错误返回false

		参数1：正则表达式
		参数2：字符串
		参数3：匹配到的结果，为 多 维数组
		参数4：指定匹配结果的顺序，为PREG_PATTERN_ORDER PREG_SET_ORDER，默认为前者
		参数5：

	preg_grep();

	preg_quote();

	2、字符串中的替换函数
		
	str_replace
		参数1：查找的字符串
		参数2：替换为的字符串
		参数3：源字符串
		参数4：替换的次数

		因参数为mixed类型，参数不仅可以为字符串，总结有如下用法：
		str_replace(string,string,string)	
		str_replace(array,string,string) //数组为字符串数组	
		str_replace(array,array,string)//替换时两个数组元素一一对应	
	str_ireplace	//不区分大小写

	preg_replace
		参数1：正则表达式
		参数2：替换为的字符串
		参数3：源字符串
		参数4：限制替换几次

		因参数为mixed类型，参数不仅可以为字符串，总结有如下用法：
		1、正常使用 
			preg_replace(string,string,string);
		2、将正则中匹配到的子模式使用到第二个参数中
			preg_replace(string,'\1\2',string);
		3、在第二个参数中调用函数，需要第一个参数正则表达式中使用e模式修正符			preg_replace('\这里是正则注意后面的e，保证了调用函数的成功\e','myfun(\2)',string);
		4、在前两个参数中都使用数组，可以一起将多个正则模式同时替换为对应字符串

	preg_replace_callback

	3、字符串的分割函数

		explode();

		preg_split();

		implode();

